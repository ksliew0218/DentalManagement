@model DentalManagement.Areas.Patient.Models.AppointmentDetailViewModel
@using DentalManagement.Models
@{
    ViewData["Title"] = "Appointment Details";
    Layout = "~/Areas/Patient/Views/Shared/_PatientLayout.cshtml";
}

<head>
    <link href="~/css/appointment-details.css" rel="stylesheet" asp-append-version="true">
    <style>
        .payment-status {
            display: inline-flex;
            align-items: center;
            font-weight: 500;
        }

        .payment-status i {
            margin-right: 5px;
        }

        .payment-status.paid {
            color: #28a745;
        }

        .payment-status.unpaid {
            color: #dc3545;
        }

        .detail-icon.total-icon {
            background-color: rgba(111, 66, 193, 0.1);
            color: #6f42c1;
        }

        .details-card + .details-card {
            margin-top: 1.5rem;
        }
    </style>
</head>

<div class="appointment-container">
    <div class="page-header">
        <h2><i class="bi bi-calendar-check"></i> Appointment Details</h2>
        <p class="subtitle">View your appointment information</p>
    </div>
    
    <div class="status-banner @Model.StatusClass">
        <div class="status-icon">
            <i class="bi bi-circle-fill"></i>
        </div>
        <div class="status-text">
            <h3>@Model.Status</h3>
            <p>
                @if (Model.Status == "Scheduled")
                {
                    <span>Your appointment has been scheduled and is awaiting confirmation.</span>
                }
                else if (Model.Status == "Confirmed")
                {
                    <span>Your appointment has been confirmed by our staff.</span>
                }
                else if (Model.Status == "Completed")
                {
                    <span>Your appointment has been completed. Thank you for visiting us!</span>
                }
                else if (Model.Status == "Cancelled")
                {
                    <span>This appointment has been cancelled.</span>
                }
                else if (Model.Status == "Pending-Payment")
                {
                    <span>Your appointment is pending payment. Please complete the payment to confirm your appointment.</span>
                }
            </p>
        </div>
    </div>
    
    
    <div class="details-card">
        <div class="card-header">
            <h3>Appointment Information</h3>
        </div>
        <div class="details-content">
            <div class="detail-item">
                <div class="detail-icon">
                    <i class="bi bi-hash"></i>
                </div>
                <div class="detail-content">
                    <span class="detail-label">Appointment ID</span>
                    <span class="detail-value">@Model.Id</span>
                </div>
            </div>
            
            <div class="detail-item">
                <div class="detail-icon">
                    <i class="bi bi-clipboard-check"></i>
                </div>
                <div class="detail-content">
                    <span class="detail-label">Treatment</span>
                    <span class="detail-value">@Model.TreatmentName</span>
                    <span class="detail-meta">@Model.TreatmentDuration min â€¢ RM @Model.TreatmentCost</span>
                </div>
            </div>
            
            <div class="detail-item">
                <div class="detail-icon doctor-icon">
                    <i class="bi bi-person-badge"></i>
                </div>
                <div class="detail-content">
                    <span class="detail-label">Doctor</span>
                    <span class="detail-value">@Model.DoctorName</span>
                    <span class="detail-meta">@Model.DoctorSpecialization</span>
                </div>
            </div>
            
            <div class="detail-item">
                <div class="detail-icon date-icon">
                    <i class="bi bi-calendar-event"></i>
                </div>
                <div class="detail-content">
                    <span class="detail-label">Date</span>
                    <span class="detail-value">@Model.FormattedAppointmentDate</span>
                </div>
            </div>
            
            <div class="detail-item">
                <div class="detail-icon time-icon">
                    <i class="bi bi-clock"></i>
                </div>
                <div class="detail-content">
                    <span class="detail-label">Time</span>
                    <span class="detail-value">@Model.FormattedAppointmentTime</span>
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(Model.Notes))
            {
                <div class="detail-item">
                    <div class="detail-icon">
                        <i class="bi bi-card-text"></i>
                    </div>
                    <div class="detail-content">
                        <span class="detail-label">Special Requests/Notes</span>
                        <span class="detail-value notes">@Model.Notes</span>
                    </div>
                </div>
            }
            
            <div class="detail-item">
                <div class="detail-icon">
                    <i class="bi bi-calendar-plus"></i>
                </div>
                <div class="detail-content">
                    <span class="detail-label">Created On</span>
                    <span class="detail-value">@Model.CreatedOn.ToString("MMM d, yyyy 'at' h:mm tt")</span>
                </div>
            </div>
        </div>
    </div>
    
    
    <div class="details-card">
        <div class="card-header">
            <h3>Payment Information</h3>
        </div>
        <div class="details-content">
            <div class="detail-item">
                <div class="detail-icon">
                    <i class="bi bi-credit-card-fill"></i>
                </div>
                <div class="detail-content">
                    <span class="detail-label">Deposit Payment</span>
                    <span class="detail-value">
                        @if (Model.PaymentStatus == PaymentStatus.Paid || Model.PaymentStatus == PaymentStatus.PartiallyPaid)
                        {
                            <span class="payment-status paid">
                                <i class="bi bi-check-circle"></i> Paid - RM @Model.DepositAmount.ToString("0.00")
                            </span>
                        }
                        else
                        {
                            <span class="payment-status unpaid">
                                <i class="bi bi-x-circle"></i> Unpaid - RM @Model.DepositAmount.ToString("0.00")
                            </span>
                        }
                    </span>
                    @if ((Model.PaymentStatus == PaymentStatus.Paid || Model.PaymentStatus == PaymentStatus.PartiallyPaid) && Model.LastPaymentDate.HasValue)
                    {
                        <span class="detail-meta">Paid on @Model.LastPaymentDate.Value.ToString("MMM d, yyyy 'at' h:mm tt")</span>
                    }
                </div>
            </div>
            
            
            <div class="detail-item">
                <div class="detail-icon">
                    <i class="bi bi-cash-coin"></i>
                </div>
                <div class="detail-content">
                    <span class="detail-label">Remaining Balance</span>
                    <span class="detail-value">
                        @if (Model.RemainingAmount <= 0 && Model.PaymentStatus == PaymentStatus.Paid)
                        {
                            <span class="payment-status paid">
                                <i class="bi bi-check-circle"></i> Paid - RM @((Model.TreatmentCost - Model.DepositAmount).ToString("0.00"))
                            </span>
                        }
                        else
                        {
                            <span class="payment-status unpaid">
                                <i class="bi bi-x-circle"></i> Due at Appointment - RM @Model.RemainingAmount.ToString("0.00")
                            </span>
                        }
                    </span>
                    @if (Model.RemainingAmount <= 0 && Model.PaymentStatus == PaymentStatus.Paid && Model.FullPaymentDate.HasValue)
                    {
                        <span class="detail-meta">Paid on @Model.FullPaymentDate.Value.ToString("MMM d, yyyy 'at' h:mm tt")</span>
                    }
                    else if (Model.RemainingAmount > 0)
                    {
                        <span class="detail-meta">Payment due after treatment completion</span>
                    }
                </div>
            </div>
            
            
            <div class="detail-item">
                <div class="detail-icon total-icon">
                    <i class="bi bi-receipt"></i>
                </div>
                <div class="detail-content">
                    <span class="detail-label">Total Treatment Cost</span>
                    <span class="detail-value">RM @Model.TreatmentCost.ToString("0.00")</span>
                    @if (Model.AmountPaid > 0)
                    {
                        <span class="detail-meta">
                            @(Math.Round(Model.AmountPaid / Model.TreatmentCost * 100))% paid (RM @Model.AmountPaid.ToString("0.00"))
                        </span>
                    }
                </div>
            </div>
        </div>
    </div>
    
    
    <div class="actions-section">
        @if (Model.Status == "Pending-Payment")
        {
            <button class="action-btn payment-btn" onclick="checkAppointmentAvailability(@Model.Id)">
                <i class="bi bi-credit-card"></i> Proceed to Payment
            </button>
        }
        @if (Model.Status == "Completed")
        {
            <button class="action-btn remark-btn" onclick="showDoctorRemarks(@Model.Id)">
                <i class="bi bi-clipboard-plus"></i> Doctor Remarks
            </button>
        }
        @if (Model.Status == "Completed" && Model.PaymentStatus == PaymentStatus.PartiallyPaid && Model.RemainingAmount > 0)
        {
            <button class="action-btn payment-btn" onclick="processRemainingPayment(@Model.Id)">
                <i class="bi bi-credit-card"></i> Pay Remaining Balance
            </button>
        }
        @if (Model.Status != "Cancelled" && Model.Status != "Completed" && Model.CanCancel)
        {
            <button class="action-btn cancel-btn" onclick="confirmCancelAppointment(@Model.Id)">
                <i class="bi bi-x-circle"></i> Cancel Appointment
            </button>
        }
        @if (Model.Status == "Cancelled")
        {
            <a href="@Url.Action("Book", "Appointments", new { area = "Patient" })" class="action-btn rebook-btn">
                <i class="bi bi-arrow-repeat"></i> Book New Appointment
            </a>
        }
        <a href="@Url.Action("Index", "Appointments", new { area = "Patient" })" class="action-btn back-btn">
            <i class="bi bi-arrow-left"></i> Back to Appointments
        </a>
    </div>

    
    <div class="modal" id="slot-unavailable-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="bi bi-exclamation-triangle"></i> Time Slot Unavailable</h3>
                <button class="close-modal-btn"><i class="bi bi-x-lg"></i></button>
            </div>
            <div class="modal-body">
                <p>Unfortunately, the time slot for this appointment is no longer available.</p>
                <p>Please book a new appointment with an available time slot.</p>
                <div class="modal-actions">
                    <a href="@Url.Action("Book", "Appointments", new { area = "Patient" })" class="action-btn">
                        <i class="bi bi-calendar-plus"></i> Book New Appointment
                    </a>
                    <button type="button" id="close-unavailable-modal" class="action-btn cancel-btn">
                        <i class="bi bi-x-circle"></i> Close
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    
    <div class="modal" id="cancel-confirmation-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="bi bi-exclamation-triangle"></i> Cancel Appointment</h3>
                <button class="close-modal-btn"><i class="bi bi-x-lg"></i></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to cancel this appointment?</p>
                <div class="warning-message">
                    <i class="bi bi-exclamation-circle"></i>
                    <p>Cancellations must be made at least 24 hours in advance to avoid a cancellation fee.</p>
                </div>
                
                <form id="cancelAppointmentForm" asp-controller="Appointments" asp-action="Cancel" asp-area="Patient" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="appointmentIdInput" name="id" value="" />
                    <div class="modal-actions">
                        <button type="submit">
                            <i class="bi bi-check-circle"></i> Yes, Cancel Appointment
                        </button>
                        <button type="button" id="keep-appointment-btn">
                            <i class="bi bi-x-circle"></i> No, Keep Appointment
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    
    <div class="modal" id="doctor-remarks-modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="modal-title"><i class="bi bi-clipboard-check"></i> Doctor Remarks</span>
                <button class="close-modal-btn" id="close-remarks-x"><i class="bi bi-x-lg"></i></button>
            </div>
            <div class="modal-body">
                <div id="remarks-loading" class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading doctor remarks...</p>
                </div>
                <div id="remarks-content" class="remarks-content" style="display: none;">
                </div>
                <div id="no-remarks-message" style="display: none;" class="text-center py-4">
                    <div class="empty-state">
                        <div class="empty-state-icon">
                            <i class="bi bi-clipboard"></i>
                        </div>
                        <h4>No Remarks Available</h4>
                        <p>Your doctor hasn't added any remarks for this appointment yet.</p>
                    </div>
                </div>
                <div class="text-center mt-4">
                    <button type="button" id="close-remarks-modal" class="btn btn-outline-secondary">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const modal = document.getElementById('cancel-confirmation-modal');
            const closeBtn = document.querySelector('.close-modal-btn');
            const keepBtn = document.getElementById('keep-appointment-btn');
            
            window.confirmCancelAppointment = function(appointmentId) {
                document.getElementById('appointmentIdInput').value = appointmentId;
                modal.classList.add('show');
            };
            
            function closeModal() {
                modal.classList.remove('show');
            }
            
            if(closeBtn) closeBtn.addEventListener('click', closeModal);
            if(keepBtn) keepBtn.addEventListener('click', closeModal);
            
            window.addEventListener('click', function(event) {
                if (event.target === modal) {
                    closeModal();
                }
            });
        });

        function checkAppointmentAvailability(appointmentId) {
            fetch(`/Patient/Appointments/CheckSlotAvailability/${appointmentId}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.isAvailable) {
                    window.location.href = `/Patient/Appointments/ProceedToPayment/${appointmentId}`;
                } else {
                    const modal = document.getElementById('slot-unavailable-modal');
                    modal.classList.add('show');

                    const closeBtn = modal.querySelector('.close-modal-btn');
                    const closeBtnAlt = document.getElementById('close-unavailable-modal');
                    
                    function closeModal() {
                        modal.classList.remove('show');
                    }

                    if (closeBtn) closeBtn.addEventListener('click', closeModal);
                    if (closeBtnAlt) closeBtnAlt.addEventListener('click', closeModal);

                    window.addEventListener('click', function(event) {
                        if (event.target === modal) {
                            closeModal();
                        }
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while checking appointment availability.');
            });
        }
        
        function processRemainingPayment(appointmentId) {
            window.location.href = `/Patient/Appointments/ProcessRemainingPayment/${appointmentId}`;
        }


        function showDoctorRemarks(appointmentId) {
        const modal = document.getElementById('doctor-remarks-modal');
        modal.classList.add('show');
        
        const closeBtn = document.getElementById('close-remarks-x');
        const closeBtnAlt = document.getElementById('close-remarks-modal');
        
        function closeModal() {
            modal.classList.remove('show');
        }
        
        if (closeBtn) closeBtn.addEventListener('click', closeModal);
        if (closeBtnAlt) closeBtnAlt.addEventListener('click', closeModal);
        
        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                closeModal();
            }
        });
        
        document.getElementById('remarks-loading').style.display = 'block';
        document.getElementById('remarks-content').style.display = 'none';
        document.getElementById('no-remarks-message').style.display = 'none';
        
        fetch(`/Patient/Appointments/GetTreatmentReport?id=${appointmentId}`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            document.getElementById('remarks-loading').style.display = 'none';
            
            if (data && data.exists && data.hasNotes) {
                const remarksContent = document.getElementById('remarks-content');
                remarksContent.style.display = 'block';
                
                const treatmentDate = new Date(data.treatmentDate);
                const formattedDate = treatmentDate.toLocaleDateString('en-US', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                });
                
                remarksContent.innerHTML = `
                    <div class="treatment-date">Treatment on ${formattedDate}</div>
                    <div class="doctor-name">
                        <i class="bi bi-person-badge"></i>
                        <span>${data.doctorName}</span>
                    </div>
                    <div class="notes">${data.notes}</div>
                `;
            } else {
                document.getElementById('no-remarks-message').style.display = 'block';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            document.getElementById('remarks-loading').style.display = 'none';
            document.getElementById('no-remarks-message').style.display = 'block';
        });
    }
    </script>
}
@model DentalManagement.Models.Appointment

@{
    ViewData["Title"] = "Appointment Details";
    Layout = "~/Areas/Doctor/Views/Shared/_DoctorLayout.cshtml";
}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">Appointment Details</h1>
            <p class="text-muted">Viewing details for appointment #@Model.Id</p>
        </div>
        <div class="d-flex">
            <a href="@Url.Action("Index", "Appointments", new { area = "Doctor" })" class="btn btn-sm btn-secondary shadow-sm mr-2">
                <i class="fas fa-arrow-left fa-sm text-white-50 mr-1"></i> Back to List
            </a>
            <a href="@Url.Action("Calendar", "Appointments", new { area = "Doctor" })" class="btn btn-sm btn-primary shadow-sm">
                <i class="fas fa-calendar fa-sm text-white-50 mr-1"></i> Calendar View
            </a>
        </div>
    </div>

    <!-- Status Banner -->
    <div class="alert @GetStatusAlertClass(Model.Status) shadow-sm mb-4 d-flex justify-content-between align-items-center">
        <div>
            <i class="@GetStatusIcon(Model.Status) mr-2"></i>
            <strong>Status: @Model.Status</strong>
            @if (Model.Status == "Scheduled" || Model.Status == "Confirmed")
            {
                <span class="ml-2 small">
                    @TimeUntilAppointment(Model.AppointmentDateTime)
                </span>
            }
        </div>
        <span class="badge badge-pill @GetStatusBadgeClass(Model.Status) p-2">@Model.Status</span>
    </div>

    <div class="row">
        <!-- Left Column - Main Details -->
        <div class="col-lg-8">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between bg-gradient-primary text-white">
                    <h6 class="m-0 font-weight-bold">Appointment Information</h6>
                    <div>
                        <i class="fas fa-calendar-check fa-sm"></i>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-4">
                            <div class="detail-item">
                                <h5 class="text-gray-600 border-bottom pb-2 mb-2"><i class="far fa-calendar-alt mr-2 text-primary"></i>Date & Time</h5>
                                <p class="lead mb-1">@Model.AppointmentDate.ToString("MMMM dd, yyyy")</p>
                                <div class="badge badge-pill badge-light py-2 px-3 shadow-sm border">
                                    <i class="far fa-clock text-primary mr-1"></i> 
                                    @(Model.AppointmentTime.Hours.ToString("00") + ":" + Model.AppointmentTime.Minutes.ToString("00"))
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-4">
                            <div class="detail-item">
                                <h5 class="text-gray-600 border-bottom pb-2 mb-2"><i class="far fa-clock mr-2 text-primary"></i>Duration</h5>
                                <p class="lead mb-1">@Model.Duration minutes</p>
                                <small class="text-muted">Estimated end time: @(Model.AppointmentDateTime.AddMinutes(Model.Duration).ToString("hh:mm tt"))</small>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-4">
                            <div class="detail-item">
                                <h5 class="text-gray-600 border-bottom pb-2 mb-2"><i class="fas fa-tooth mr-2 text-primary"></i>Treatment</h5>
                                <div class="card border-0 bg-light">
                                    <div class="card-body">
                                        <h5 class="card-title mb-1">@Model.TreatmentType?.Name</h5>
                                        @if (Model.TreatmentType?.Price > 0)
                                        {
                                            <p class="text-primary font-weight-bold mb-2">RM @Model.TreatmentType?.Price.ToString("0.00")</p>
                                        }
                                        @if (!string.IsNullOrEmpty(Model.TreatmentType?.Description))
                                        {
                                            <p class="card-text small">@Model.TreatmentType?.Description</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-4">
                            <div class="detail-item">
                                <h5 class="text-gray-600 border-bottom pb-2 mb-2"><i class="fas fa-info-circle mr-2 text-primary"></i>Tracking Info</h5>
                                <div class="timeline small">
                                    <div class="timeline-item">
                                        <div class="timeline-marker bg-success"></div>
                                        <div class="timeline-content">
                                            <h6 class="timeline-title mb-0">Created</h6>
                                            <p class="text-muted">@Model.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</p>
                                        </div>
                                    </div>
                                    @if (Model.UpdatedAt != null)
                                    {
                                        <div class="timeline-item">
                                            <div class="timeline-marker bg-info"></div>
                                            <div class="timeline-content">
                                                <h6 class="timeline-title mb-0">Last Updated</h6>
                                                <p class="text-muted">@Model.UpdatedAt?.ToString("MMM dd, yyyy hh:mm tt")</p>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Notes))
                    {
                        <div class="row">
                            <div class="col-12 mb-4">
                                <div class="detail-item">
                                    <h5 class="text-gray-600 border-bottom pb-2 mb-2"><i class="fas fa-sticky-note mr-2 text-primary"></i>Notes</h5>
                                    <div class="p-3 bg-light rounded shadow-sm">
                                        <p class="mb-0">@Model.Notes</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    
                    <div class="row mt-3">
                        <div class="col-12">
                            <div class="d-flex justify-content-center">
                                <a href="@Url.Action("Index", "Appointments", new { area = "Doctor" })" class="btn btn-primary shadow-sm">
                                    <i class="fas fa-arrow-left mr-1"></i> Back to List
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Time Slots Card -->
            @if (Model.TimeSlots.Any())
            {
                <div class="card shadow mb-4">
                    <div class="card-header py-3 d-flex justify-content-between align-items-center bg-gradient-info text-white">
                        <h6 class="m-0 font-weight-bold">Reserved Time Slots</h6>
                        <div>
                            <i class="fas fa-clock fa-sm"></i>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover" width="100%" cellspacing="0">
                                <thead class="bg-light">
                                    <tr>
                                        <th>Start Time</th>
                                        <th>End Time</th>
                                        <th>Duration</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var slot in Model.TimeSlots)
                                    {
                                        <tr>
                                            <td>@slot.StartTime.ToString("MMM dd, yyyy hh:mm tt")</td>
                                            <td>@slot.EndTime.ToString("MMM dd, yyyy hh:mm tt")</td>
                                            <td>@((slot.EndTime - slot.StartTime).TotalMinutes) min</td>
                                            <td class="text-center">
                                                <span class="badge badge-pill @(slot.IsBooked ? "badge-primary" : "badge-success") px-3 py-2">
                                                    <i class="@(slot.IsBooked ? "fas fa-lock" : "fas fa-check-circle") mr-1"></i>
                                                    @(slot.IsBooked ? "Booked" : "Available")
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Right Column - Patient Info -->
        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex justify-content-between align-items-center bg-gradient-success text-white">
                    <h6 class="m-0 font-weight-bold">Patient Information</h6>
                    <div>
                        <i class="fas fa-user fa-sm"></i>
                    </div>
                </div>
                <div class="card-body">
                    <div class="text-center mb-4">
                        <img class="img-fluid rounded-circle border shadow-sm" 
                             src="@(string.IsNullOrEmpty(Model.Patient?.ProfilePic) ? "/img/undraw_profile.svg" : Model.Patient?.ProfilePic)" 
                             alt="Patient Profile" style="width: 120px; height: 120px; object-fit: cover;">
                        <h4 class="mt-3 font-weight-bold text-gray-800">@Model.Patient?.FirstName @Model.Patient?.LastName</h4>
                        <p class="text-muted">Patient ID: @Model.PatientId</p>
                        <div class="mt-2">
                            <a href="mailto:@Model.Patient?.User?.Email" class="btn btn-sm btn-outline-primary mr-1">
                                <i class="fas fa-envelope"></i>
                            </a>
                            <a href="tel:@Model.Patient?.PhoneNumber" class="btn btn-sm btn-outline-info mr-1">
                                <i class="fas fa-phone"></i>
                            </a>
                            <a href="#" class="btn btn-sm btn-outline-secondary">
                                <i class="fas fa-comment"></i>
                            </a>
                        </div>
                    </div>

                    <div class="list-group">
                        <div class="list-group-item bg-light">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1"><i class="fas fa-venus-mars text-primary mr-2"></i>Gender</h6>
                            </div>
                            <p class="mb-1 font-weight-bold">@Model.Patient?.Gender</p>
                        </div>

                        <div class="list-group-item">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1"><i class="fas fa-birthday-cake text-primary mr-2"></i>Date of Birth</h6>
                            </div>
                            <p class="mb-1 font-weight-bold">@(Model.Patient?.DateOfBirth.ToString("MMM dd, yyyy"))</p>
                            @if(Model.Patient?.DateOfBirth != null)
                            {
                                <small class="text-muted">Age: @CalculateAge(Model.Patient.DateOfBirth)</small>
                            }
                        </div>

                        <div class="list-group-item bg-light">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1"><i class="fas fa-phone text-primary mr-2"></i>Contact</h6>
                            </div>
                            <p class="mb-1 font-weight-bold">@(string.IsNullOrEmpty(Model.Patient?.PhoneNumber) ? "Not provided" : Model.Patient?.PhoneNumber)</p>
                            <p class="mb-1">
                                <a href="mailto:@Model.Patient?.User?.Email" class="text-primary">
                                    @Model.Patient?.User?.Email
                                </a>
                            </p>
                        </div>
                    </div>

                    <div class="mt-4">
                        <a href="#" class="btn btn-block btn-outline-primary shadow-sm">
                            <i class="fas fa-history mr-1"></i> View Patient History
                        </a>
                    </div>
                </div>
            </div>
            
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex justify-content-between align-items-center bg-gradient-dark text-white">
                    <h6 class="m-0 font-weight-bold">Medical Records</h6>
                    <div>
                        <i class="fas fa-notes-medical fa-sm"></i>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush">
                        <a href="#" class="list-group-item list-group-item-action p-3">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">Add Treatment Notes</h6>
                                <i class="fas fa-plus-circle text-success"></i>
                            </div>
                            <small class="text-muted">Add notes for this appointment</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action p-3">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">Previous Records</h6>
                                <i class="fas fa-file-medical text-primary"></i>
                            </div>
                            <small class="text-muted">View past medical records</small>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action p-3">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">Upload Images</h6>
                                <i class="fas fa-upload text-info"></i>
                            </div>
                            <small class="text-muted">Add X-rays or dental images</small>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.timeline {
    position: relative;
    padding-left: 30px;
}
.timeline-item {
    position: relative;
    margin-bottom: 15px;
}
.timeline-marker {
    position: absolute;
    left: -30px;
    top: 0;
    width: 15px;
    height: 15px;
    border-radius: 50%;
}
.timeline-content {
    padding-bottom: 10px;
    border-bottom: 1px dashed #e3e6f0;
}
</style>

@functions {
    string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Scheduled" => "badge-primary",
            "Confirmed" => "badge-success",
            "Completed" => "badge-info",
            "Cancelled" => "badge-danger",
            "Rescheduled" => "badge-warning",
            "No-Show" => "badge-secondary",
            _ => "badge-primary",
        };
    }

    string GetStatusAlertClass(string status)
    {
        return status switch
        {
            "Scheduled" => "alert-primary",
            "Confirmed" => "alert-success",
            "Completed" => "alert-info",
            "Cancelled" => "alert-danger",
            "Rescheduled" => "alert-warning",
            "No-Show" => "alert-secondary",
            _ => "alert-primary",
        };
    }

    string GetStatusIcon(string status)
    {
        return status switch
        {
            "Scheduled" => "fas fa-calendar-day",
            "Confirmed" => "fas fa-calendar-check",
            "Completed" => "fas fa-check-circle",
            "Cancelled" => "fas fa-times-circle",
            "Rescheduled" => "fas fa-redo",
            "No-Show" => "fas fa-user-slash",
            _ => "fas fa-calendar",
        };
    }

    string TimeUntilAppointment(DateTime appointmentDateTime)
    {
        var timeUntil = appointmentDateTime - DateTime.Now;
        
        if (timeUntil.TotalDays > 30)
        {
            return $"({Math.Floor(timeUntil.TotalDays / 30)} months {Math.Floor(timeUntil.TotalDays % 30)} days from now)";
        }
        else if (timeUntil.TotalDays > 1)
        {
            return $"({Math.Floor(timeUntil.TotalDays)} days from now)";
        }
        else if (timeUntil.TotalHours > 1)
        {
            return $"({Math.Floor(timeUntil.TotalHours)} hours from now)";
        }
        else if (timeUntil.TotalMinutes > 0)
        {
            return $"({Math.Floor(timeUntil.TotalMinutes)} minutes from now)";
        }
        else if (timeUntil.TotalMinutes > -60)
        {
            return $"(Started {Math.Abs(Math.Floor(timeUntil.TotalMinutes))} minutes ago)";
        }
        else if (timeUntil.TotalHours > -24)
        {
            return $"(Started {Math.Abs(Math.Floor(timeUntil.TotalHours))} hours ago)";
        }
        else
        {
            return $"(Appointment date passed)";
        }
    }

    int CalculateAge(DateTime birthDate)
    {
        var today = DateTime.Today;
        var age = today.Year - birthDate.Year;
        
        if (birthDate.Date > today.AddYears(-age))
        {
            age--;
        }
        
        return age;
    }
} 
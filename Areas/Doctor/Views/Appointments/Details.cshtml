@model DentalManagement.Models.Appointment

@{
    ViewData["Title"] = "Appointment Details";
    Layout = "~/Areas/Doctor/Views/Shared/_DoctorLayout.cshtml";
}

<div class="container-fluid">
    
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800 font-weight-bold">
                <i class="bi bi-calendar-check me-2 text-primary"></i>Appointment Details
            </h1>
            <p class="text-muted">Viewing details for appointment #@Model.Id</p>
        </div>
        <div class="d-flex">
            <a href="@Url.Action("Index", "Appointments", new { area = "Doctor" })" class="btn btn-outline-primary me-2 rounded-pill px-3">
                <i class="bi bi-arrow-left me-2"></i>Back to List
            </a>
            <a href="@Url.Action("Calendar", "Appointments", new { area = "Doctor" })" class="btn btn-primary shadow-sm rounded-pill px-4">
                <i class="bi bi-calendar3 fa-sm text-white-50 me-2"></i>Calendar View
            </a>
        </div>
    </div>

    <div class="row">
        
        <div class="col-lg-8">
            
            <div class="row mb-4">
                
                <div class="col-md-6 mb-4 mb-md-0">
                    <div class="card h-100 shadow-sm border-0 rounded-lg overflow-hidden">
                        <div class="card-header bg-white py-3 border-0">
                            <h6 class="m-0 font-weight-bold text-primary">Appointment Status</h6>
                        </div>
                        <div class="card-body p-0">
                            <div class="status-banner @GetStatusCardClass(Model.Status) p-3">
                                <div class="d-flex align-items-center">
                                    <div class="status-icon me-3">
                                        <i class="fas @GetStatusIcon(Model.Status) fa-2x"></i>
                                    </div>
        <div>
                                        <h5 class="card-title mb-1 fw-bold">@Model.Status</h5>
                                        @if ((Model.Status == "Scheduled" || Model.Status == "Confirmed") && Model.AppointmentDateTime != default)
                                        {
                                            <p class="card-text">
                                                <span class="text-white">@TimeUntilAppointment(Model.AppointmentDateTime)</span>
                                            </p>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="p-3">
                                <div class="d-flex align-items-center justify-content-between">
                                    <div>
                                        @if (Model.AppointmentDateTime != default)
                                        {
                                            <span class="badge bg-light text-dark p-2 rounded-pill">
                                                <i class="bi bi-calendar text-primary me-1"></i> @Model.AppointmentDate.ToString("MMM dd, yyyy")
                                            </span>
                                            <span class="badge bg-light text-dark p-2 rounded-pill ms-2">
                                                <i class="bi bi-clock text-primary me-1"></i> @Model.AppointmentDateTime.ToString("hh:mm tt")
                                            </span>
                                        }
                                    </div>
                                    
                                    @if (Model.Status == "Scheduled" || Model.Status == "Confirmed")
                                    {
                                        <button type="button" class="btn btn-sm btn-primary rounded-pill" data-bs-toggle="modal" data-bs-target="#updateStatusModal">
                                            <i class="fas fa-edit me-1"></i> Update Status
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-sm btn-secondary rounded-pill" disabled title="Cannot update status after it's been set to @Model.Status">
                                            <i class="fas fa-edit me-1"></i> Status Locked
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
    </div>

                
                <div class="col-md-6">
                    <div class="card h-100 shadow-sm border-0 rounded-lg overflow-hidden">
                        <div class="card-header bg-white py-3 border-0">
                            <h6 class="m-0 font-weight-bold text-primary">Payment Status</h6>
                        </div>
                        <div class="card-body p-0">
                            <div class="status-banner @GetPaymentCardClass(Model.PaymentStatus) p-3">
                                <div class="d-flex align-items-center">
                                    <div class="payment-icon me-3">
                                        <i class="fas @GetPaymentStatusIcon(Model.PaymentStatus) fa-2x"></i>
                                    </div>
                    <div>
                                        <h5 class="card-title mb-1 fw-bold">@Model.PaymentStatus.ToString()</h5>
                    </div>
                                </div>
                            </div>
                            <div class="p-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="fw-bold mb-0">RM @Model.TotalAmount.ToString("0.00")</h6>
                                        <small class="text-muted">
                                            @GetPaymentStatusDescription(Model.PaymentStatus, Model.TotalAmount, Model.DepositAmount)
                                        </small>
                                    </div>
                                    @if (Model.DepositAmount > 0)
                                    {
                                        <span class="badge bg-light text-dark p-2 rounded-pill">
                                            <i class="bi bi-cash-coin text-success me-1"></i> Deposit: RM @Model.DepositAmount.ToString("0.00")
                                        </span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            
            <div class="card shadow-sm border-0 rounded-lg mb-4 overflow-hidden">
                <div class="card-header d-flex justify-content-between align-items-center bg-white py-3 border-0">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="bi bi-person me-2"></i>Patient Information
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-3 text-center mb-3 mb-md-0">
                            @if (Model.Patient != null)
                            {
                                @if (!string.IsNullOrEmpty(Model.Patient.ProfilePic))
                                {
                                    <img src="@Model.Patient.ProfilePic" alt="Patient Photo" class="rounded-circle img-thumbnail mb-3" style="width: 100px; height: 100px; object-fit: cover;">
                                }
                                else
                                {
                                    <div class="patient-avatar mb-3 bg-gradient-primary">
                                        @if (!string.IsNullOrEmpty(Model.Patient.FirstName) && !string.IsNullOrEmpty(Model.Patient.LastName))
                                        {
                                            @(Model.Patient.FirstName[0])@(Model.Patient.LastName[0])
                                        }
                                        else
                                        {
                                            <i class="fas fa-user"></i>
                                        }
                                    </div>
                                }
                                <h5 class="fw-bold mb-0">@Model.Patient.FirstName @Model.Patient.LastName</h5>
                                @if (Model.Patient.DateOfBirth != default)
                                {
                                    <p class="text-muted">@CalculateAge(Model.Patient.DateOfBirth) years old</p>
                                }
                            }
                            else
                            {
                                <div class="patient-avatar mb-3 bg-gradient-primary">
                                    <i class="fas fa-user"></i>
                                </div>
                                <h5 class="fw-bold mb-0">Patient Information Unavailable</h5>
                            }
                        </div>
                        @if (Model.Patient != null)
                        {
                            <div class="col-md-9">
                    <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <div class="patient-detail-card bg-light p-3 rounded-lg h-100">
                                            <h6 class="text-primary mb-2">
                                                <i class="fas fa-phone-alt me-2"></i>Phone
                                            </h6>
                                            <p class="mb-0 fw-medium">@(string.IsNullOrEmpty(Model.Patient.PhoneNumber) ? "Not provided" : Model.Patient.PhoneNumber)</p>
                                </div>
                            </div>
                                    <div class="col-md-4 mb-3">
                                        <div class="patient-detail-card bg-light p-3 rounded-lg h-100">
                                            <h6 class="text-primary mb-2">
                                                <i class="fas fa-envelope me-2"></i>Email
                                            </h6>
                                            <p class="mb-0 fw-medium">
                                                @(string.IsNullOrEmpty(Model.Patient?.User?.Email) ? "Not provided" : Model.Patient.User.Email)
                                            </p>
                        </div>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <div class="patient-detail-card bg-light p-3 rounded-lg h-100">
                                            <h6 class="text-primary mb-2">
                                                <i class="fas fa-birthday-cake me-2"></i>Date of Birth
                                            </h6>
                                            <p class="mb-0 fw-medium">@(Model.Patient.DateOfBirth != default ? Model.Patient.DateOfBirth.ToString("dd MMM yyyy") : "Not provided")</p>
                                        </div>
                                    </div>
                                    <div class="col-md-12">
                                        <div class="patient-detail-card bg-light p-3 rounded-lg">
                                            <h6 class="text-primary mb-2">
                                                <i class="fas fa-map-marker-alt me-2"></i>Address
                                            </h6>
                                            <p class="mb-0 fw-medium">@(string.IsNullOrEmpty(Model.Patient.Address) ? "Not provided" : Model.Patient.Address)</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="col-md-9">
                                <div class="alert alert-warning border-0 shadow-sm">
                                    <i class="fas fa-exclamation-triangle me-2"></i> Patient information is not available.
                                </div>
                            </div>
                        }
                            </div>
                        </div>
                    </div>

            
            <div class="card shadow-sm border-0 rounded-lg mb-4 overflow-hidden">
                <div class="card-header d-flex justify-content-between align-items-center bg-white py-3 border-0">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="bi bi-person-badge me-2"></i>Doctor Information
                    </h6>
                </div>
                                    <div class="card-body">
                    @if (Model.Doctor != null)
                    {
                        <div class="text-center mb-3">
                            @if (!string.IsNullOrEmpty(Model.Doctor.ProfilePictureUrl))
                            {
                                <img src="@Model.Doctor.ProfilePictureUrl" alt="Doctor Photo" class="rounded-circle img-thumbnail mb-3" style="width: 100px; height: 100px; object-fit: cover;">
                            }
                            else
                            {
                                <div class="doctor-avatar mx-auto mb-3 bg-gradient-info">
                                    <i class="fas fa-user-md"></i>
                                </div>
                            }
                            <h5 class="mb-0 fw-bold">@Model.Doctor.FirstName @Model.Doctor.LastName</h5>
                            <p class="text-muted">Dental Specialist</p>
                        </div>
                        <div class="doctor-contact p-3 bg-light rounded-lg">
                            <div class="d-flex align-items-center mb-2">
                                <i class="bi bi-envelope-fill text-primary me-3"></i>
                                <span>@(Model.Doctor.User != null ? Model.Doctor.User.Email : "Email not available")</span>
                            </div>
                            <div class="d-flex align-items-center">
                                <i class="bi bi-telephone-fill text-primary me-3"></i>
                                <span>@(string.IsNullOrEmpty(Model.Doctor.PhoneNumber) ? "Phone not available" : Model.Doctor.PhoneNumber)</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-4">
                            <i class="bi bi-person-x fs-1 text-muted mb-3"></i>
                            <h5 class="mb-3 fw-bold">Doctor Not Assigned</h5>
                            <p class="text-muted">No doctor has been assigned to this appointment yet.</p>
                        </div>
                    }
                </div>
            </div>
            
            
            @if (Model.TreatmentReports != null && Model.TreatmentReports.Any())
            {
                var latestReport = Model.TreatmentReports.OrderByDescending(tr => tr.CreatedAt).FirstOrDefault();
                
                <div class="card shadow-sm border-0 rounded-lg mb-4 overflow-hidden">
                    <div class="card-header d-flex justify-content-between align-items-center bg-white py-3 border-0">
                        <h6 class="m-0 font-weight-bold text-primary">
                            <i class="bi bi-clipboard-check me-2"></i>Treatment Report
                        </h6>
                        <div class="d-flex">
                            <button type="button" class="btn btn-primary btn-sm btn-circle me-2" data-bs-toggle="modal" data-bs-target="#editTreatmentReportModal" title="Edit Treatment Report">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button type="button" class="btn btn-info btn-sm btn-circle" data-bs-toggle="modal" data-bs-target="#viewDentalChartModal" title="View Dental Chart">
                                <i class="bi bi-diagram-3"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="treatment-report-header p-3 bg-success bg-opacity-10 rounded-lg mb-3">
                            <div class="d-flex align-items-center mb-2">
                                <i class="bi bi-clipboard-check me-2 text-success fs-4"></i>
                                <h5 class="mb-0 fw-bold">Treatment Completed</h5>
                            </div>
                            <p class="mb-0 text-muted">
                                <i class="bi bi-calendar-event me-1"></i>
                                @latestReport.TreatmentDate.ToString("MMMM dd, yyyy at hh:mm tt")
                            </p>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(latestReport?.Notes))
                        {
                            <h6 class="text-primary border-bottom pb-2 mb-3">
                                <i class="bi bi-pencil-square me-2"></i>Doctor's Treatment Notes
                            </h6>
                            <div class="p-3 bg-light rounded-lg">
                                <p class="mb-0">@latestReport.Notes</p>
                            </div>
                            <div class="text-end mt-1">
                                <small class="text-muted">Added on @latestReport.CreatedAt.ToString("MMM dd, yyyy")</small>
                            </div>
                        }
                    </div>
                </div>
            }
            else if (Model.Status == "Completed")
            {
                <div class="card shadow-sm border-0 rounded-lg mb-4 overflow-hidden">
                    <div class="card-header d-flex justify-content-between align-items-center bg-white py-3 border-0">
                        <h6 class="m-0 font-weight-bold text-primary">
                            <i class="bi bi-clipboard-plus me-2"></i>Treatment Report
                        </h6>
                    </div>
                    <div class="card-body text-center p-4">
                        <i class="bi bi-clipboard-plus fs-1 text-primary opacity-75 mb-3"></i>
                        <h5 class="mb-3 fw-bold">No Treatment Report Added</h5>
                        <p class="text-muted mb-4">Add a treatment report to document the dental treatment performed</p>
                        <button type="button" class="btn btn-primary rounded-pill px-4 py-2 shadow-sm" data-bs-toggle="modal" data-bs-target="#treatmentReportModal">
                            <i class="bi bi-plus-circle me-2"></i> Add Treatment Report
                        </button>
                    </div>
                </div>
            }
            
            
            <div class="card shadow-sm border-0 rounded-lg mb-4 overflow-hidden">
                <div class="card-header d-flex justify-content-between align-items-center bg-white py-3 border-0">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="bi bi-info-circle me-2"></i>Appointment Details
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row g-4">
                        <div class="col-md-6">
                            <div class="detail-card bg-light p-3 rounded-lg h-100">
                                <h6 class="text-primary mb-3">
                                    <i class="bi bi-calendar-event me-2"></i>Date & Time
                                </h6>
                                @if (Model.AppointmentDate != default)
                                {
                                    <p class="lead fw-bold mb-1">@Model.AppointmentDate.ToString("MMMM dd, yyyy")</p>
                                }
                                else
                                {
                                    <p class="lead fw-bold mb-1">Date not specified</p>
                                }
                                
                                @if (Model.AppointmentDateTime != default)
                                {
                                    <p class="mb-0">
                                        <i class="bi bi-clock text-primary me-1"></i> 
                                        @(Model.AppointmentDateTime.ToString("hh:mm tt"))
                                    </p>
                                    <p class="mb-0 text-muted small">
                                        <i class="bi bi-hourglass me-1"></i>
                                        Duration: @Model.Duration minutes
                                    </p>
                                    <p class="mb-0 text-muted small">
                                        <i class="bi bi-alarm me-1"></i>
                                        End time: @(Model.AppointmentDateTime.AddMinutes(Model.Duration).ToString("hh:mm tt"))
                                    </p>
                                }
                                else
                                {
                                    <p class="mb-0">
                                        <i class="bi bi-clock text-primary me-1"></i> 
                                        Time not specified
                                    </p>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-card bg-light p-3 rounded-lg h-100">
                                <h6 class="text-primary mb-3">
                                    <i class="bi bi-clipboard-plus me-2"></i>Treatment
                                </h6>
                                <div class="treatment-card p-3 bg-white rounded-lg shadow-sm">
                                    <h5 class="card-title mb-1 fw-bold">@Model.TreatmentType?.Name</h5>
                                        @if (Model.TreatmentType?.Price > 0)
                                        {
                                            <p class="text-primary font-weight-bold mb-2">RM @Model.TreatmentType?.Price.ToString("0.00")</p>
                                        }
                                        @if (!string.IsNullOrEmpty(Model.TreatmentType?.Description))
                                        {
                                        <p class="card-text small text-muted mb-0">@Model.TreatmentType?.Description</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                    @if (!string.IsNullOrEmpty(Model.Notes))
                    {
                        <div class="detail-card bg-light p-3 rounded-lg mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="bi bi-journal-text me-2"></i>Patient Notes
                            </h6>
                            <div class="p-3 bg-white rounded-lg shadow-sm">
                                <p class="mb-0">@Model.Notes</p>
                            </div>
                        </div>
                    }
                </div>
            </div>

            
            <div class="card shadow-sm border-0 rounded-lg mb-4 overflow-hidden">
                <div class="card-header d-flex justify-content-between align-items-center bg-white py-3 border-0">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="bi bi-credit-card me-2"></i>Payment Details
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row mb-4">
                        <div class="col-md-6 mb-3 mb-md-0">
                            <div class="payment-summary-card p-3 bg-light rounded-lg">
                                <h6 class="text-primary mb-2">
                                    <i class="bi bi-tag me-2"></i>Payment Summary
                                </h6>
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Total Amount:</span>
                                    <span class="fw-bold">RM @Model.TotalAmount.ToString("0.00")</span>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <span>Deposit Paid:</span>
                                    <span class="fw-bold">RM @Model.DepositAmount.ToString("0.00")</span>
                                </div>
                                @if (Model.TotalAmount > Model.DepositAmount)
                                {
                                    <div class="d-flex justify-content-between mt-2 pt-2 border-top">
                                        <span>Remaining Balance:</span>
                                        <span class="fw-bold text-primary">RM @((Model.TotalAmount - Model.DepositAmount).ToString("0.00"))</span>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="payment-status-detail p-3 @GetPaymentStatusCardClass(Model.PaymentStatus) rounded-lg">
                                <div class="d-flex align-items-center">
                                    <div class="payment-status-icon me-3 bg-white rounded-circle p-2">
                                        <i class="@GetPaymentStatusIcon(Model.PaymentStatus) fs-4 @GetPaymentStatusTextClass(Model.PaymentStatus)"></i>
                                    </div>
                                    <div>
                                        <h6 class="mb-1 fw-bold">@Model.PaymentStatus</h6>
                                        <p class="mb-0 small">
                                            @GetPaymentStatusDescription(Model.PaymentStatus, Model.TotalAmount, Model.DepositAmount)
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    @if (Model.Payments.Any())
                    {
                        <div class="mt-4">
                            <h6 class="text-primary border-bottom pb-2 mb-3">
                                <i class="bi bi-list-ul me-2"></i>Payment History
                            </h6>
                            <div class="table-responsive shadow-sm rounded-lg overflow-hidden">
                                <table class="table table-hover mb-0">
                                    <thead class="bg-light">
                                        <tr>
                                            <th>Date</th>
                                            <th>Type</th>
                                            <th class="text-end">Amount</th>
                                            <th class="text-center">Status</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var payment in Model.Payments.OrderByDescending(p => p.CreatedAt))
                                        {
                                            <tr>
                                                <td>@payment.CreatedAt.ToString("MMM dd, yyyy")</td>
                                                <td>
                                                    <span class="d-flex align-items-center">
                                                        <i class="bi @GetPaymentTypeIcon(payment.PaymentType) me-2 text-primary"></i>
                                                        @payment.PaymentType
                                                    </span>
                                                </td>
                                                <td class="text-end fw-bold">RM @payment.Amount.ToString("0.00")</td>
                                                <td class="text-center">
                                                    <span class="badge rounded-pill @GetPaymentBadgeClass(payment.Status) px-3 py-2">
                                                        @payment.Status
                                                    </span>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        
        <div class="col-lg-4">
            <div class="card shadow-sm border-0 rounded-lg mb-4 overflow-hidden">
                <div class="card-header d-flex justify-content-between align-items-center bg-white py-3 border-0">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="bi bi-activity me-2"></i>Appointment Timeline
                    </h6>
                </div>
                <div class="card-body p-3">
                    <div class="timeline-modern">
                                    <div class="timeline-item">
                            <div class="timeline-marker bg-success shadow-sm">
                                <i class="bi bi-plus-circle text-white"></i>
                            </div>
                                        <div class="timeline-content">
                                <h6 class="timeline-title mb-0 fw-bold">Appointment Created</h6>
                                <p class="text-muted mb-0">@Model.CreatedAt.ToString("MMM dd, yyyy")</p>
                                <p class="text-muted small mb-0">@Model.CreatedAt.ToString("hh:mm tt")</p>
                                        </div>
                                    </div>
                        
                        @if (Model.UpdatedAt != null && Model.UpdatedAt != Model.CreatedAt)
                                    {
                                        <div class="timeline-item">
                                <div class="timeline-marker bg-info shadow-sm">
                                    <i class="bi bi-pencil text-white"></i>
                                </div>
                                            <div class="timeline-content">
                                    <h6 class="timeline-title mb-0 fw-bold">Last Updated</h6>
                                    <p class="text-muted mb-0">@Model.UpdatedAt?.ToString("MMM dd, yyyy")</p>
                                    <p class="text-muted small mb-0">@Model.UpdatedAt?.ToString("hh:mm tt")</p>
                                            </div>
                                        </div>
                                    }
                        
                        @if (Model.Status == "Completed")
                        {
                            <div class="timeline-item">
                                <div class="timeline-marker bg-success shadow-sm">
                                    <i class="bi bi-check-circle text-white"></i>
                                </div>
                                <div class="timeline-content">
                                    <h6 class="timeline-title mb-0 fw-bold">Appointment Completed</h6>
                                    @if (Model.TreatmentReports != null && Model.TreatmentReports.Any())
                                    {
                                        var treatmentDate = Model.TreatmentReports.OrderByDescending(tr => tr.CreatedAt).FirstOrDefault()?.TreatmentDate;
                                        <p class="text-muted mb-0">@treatmentDate?.ToString("MMM dd, yyyy")</p>
                                        <p class="text-muted small mb-0">@treatmentDate?.ToString("hh:mm tt")</p>
                                    }
                                    else
                                    {
                                        <p class="text-muted mb-0">Date not recorded</p>
                                    }
                            </div>
                        </div>
                        }
                        else if (Model.Status == "Cancelled")
                        {
                            <div class="timeline-item">
                                <div class="timeline-marker bg-danger shadow-sm">
                                    <i class="bi bi-x-circle text-white"></i>
                                    </div>
                                <div class="timeline-content">
                                    <h6 class="timeline-title mb-0 fw-bold">Appointment Cancelled</h6>
                                    <p class="text-muted mb-0">@Model.UpdatedAt?.ToString("MMM dd, yyyy")</p>
                                    <p class="text-muted small mb-0">@Model.UpdatedAt?.ToString("hh:mm tt")</p>
                                </div>
                            </div>
                        }
                        else if (Model.Status == "No-Show")
                        {
                            <div class="timeline-item">
                                <div class="timeline-marker bg-warning shadow-sm">
                                    <i class="bi bi-exclamation-triangle text-white"></i>
                                </div>
                                <div class="timeline-content">
                                    <h6 class="timeline-title mb-0 fw-bold">Patient No-Show</h6>
                                    <p class="text-muted mb-0">@Model.UpdatedAt?.ToString("MMM dd, yyyy")</p>
                                    <p class="text-muted small mb-0">@Model.UpdatedAt?.ToString("hh:mm tt")</p>
                            </div>
                        </div>
                    }
                    
                        @if (Model.AppointmentDateTime > DateTime.Now && (Model.Status == "Scheduled" || Model.Status == "Confirmed"))
                        {
                            <div class="timeline-item">
                                <div class="timeline-marker bg-light shadow-sm border">
                                    <i class="bi bi-calendar-event text-primary"></i>
                            </div>
                                <div class="timeline-content">
                                    <h6 class="timeline-title mb-0 fw-bold">Upcoming Appointment</h6>
                                    <p class="text-muted mb-0">@Model.AppointmentDate.ToString("MMM dd, yyyy")</p>
                                    <p class="text-muted small mb-0">@Model.AppointmentDateTime.ToString("hh:mm tt")</p>
                        </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            
            @if (Model.TimeSlots.Any())
            {
                <div class="card shadow-sm border-0 rounded-lg mb-4 overflow-hidden">
                    <div class="card-header d-flex justify-content-between align-items-center bg-white py-3 border-0">
                        <h6 class="m-0 font-weight-bold text-primary">
                            <i class="bi bi-clock-history me-2"></i>Reserved Time Slots
                        </h6>
                        </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0" width="100%" cellspacing="0">
                                <thead class="bg-light">
                                    <tr>
                                        <th>Start Time</th>
                                        <th>End Time</th>
                                        <th class="text-center">Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var slot in Model.TimeSlots)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex flex-column">
                                                    <span>@slot.StartTime.ToString("MMM dd, yyyy")</span>
                                                    <small class="text-muted">@slot.StartTime.ToString("hh:mm tt")</small>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex flex-column">
                                                    <span>@slot.EndTime.ToString("MMM dd, yyyy")</span>
                                                    <small class="text-muted">@slot.EndTime.ToString("hh:mm tt")</small>
                                                </div>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge rounded-pill @(slot.IsBooked ? "bg-primary" : "bg-success") px-3 py-2">
                                                    <i class="bi @(slot.IsBooked ? "bi-lock" : "bi-check-circle") me-1"></i>
                                                    @(slot.IsBooked ? "Booked" : "Available")
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
        </div>


<div class="modal fade" id="treatmentReportModal" tabindex="-1" aria-labelledby="treatmentReportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content border-0 shadow-lg rounded-lg overflow-hidden">
            <div class="modal-header bg-gradient-primary text-white">
                <h5 class="modal-title" id="treatmentReportModalLabel">
                    <i class="bi bi-clipboard-plus me-2"></i>Add Treatment Report
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="AddTreatmentReport" asp-controller="Appointments" asp-area="Doctor" method="post">
                <input type="hidden" name="id" value="@Model.Id" />
                <input type="hidden" name="dentalChart" id="dentalChartData" />
                <div class="modal-body p-4">
                    <div class="row mb-4">
                        <div class="col-12">
                            <h6 class="mb-3 text-primary fw-bold">
                                <i class="bi bi-pencil me-2"></i>Doctor's Treatment Notes
                            </h6>
                            <textarea name="treatmentNotes" class="form-control" rows="5" placeholder="Enter detailed notes about the treatment performed..."></textarea>
                        </div>
                    </div>
                    
                    <h6 class="mb-3 text-primary fw-bold">
                        <i class="bi bi-diagram-3 me-2"></i>Dental Chart
                    </h6>
                    <div class="alert alert-info d-flex align-items-center mb-3">
                        <i class="bi bi-info-circle-fill me-2"></i>
                    <div>
                            Click on a tooth to change its status (Healthy → Decayed → Filled → Healthy)
                    </div>
                </div>
                    
                    <div class="dental-chart-container bg-light p-4 rounded-lg">
                        <h5 class="text-center mb-4 border-bottom pb-2">Upper Teeth</h5>
                        <div class="teeth-row" id="upperTeethEdit">
                        </div>
                        
                        <h5 class="text-center my-4 border-bottom pb-2">Lower Teeth</h5>
                        <div class="teeth-row" id="lowerTeethEdit">
                    </div>

                        <div class="dental-chart-legend mt-4 p-3 border-top">
                            <div class="d-flex flex-wrap justify-content-center">
                                <div class="legend-item me-4 mb-2 d-flex align-items-center">
                                    <div class="legend-color healthy-tooth me-2"></div>
                                    <span>Healthy Tooth</span>
                            </div>
                                <div class="legend-item me-4 mb-2 d-flex align-items-center">
                                    <div class="legend-color decayed-tooth me-2"></div>
                                    <span>Decayed Tooth</span>
                                </div>
                                <div class="legend-item mb-2 d-flex align-items-center">
                                    <div class="legend-color filled-tooth me-2"></div>
                                    <span>Filled Tooth</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer bg-light">
                    <button type="button" class="btn btn-outline-secondary rounded-pill px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary rounded-pill px-4 shadow-sm">
                        <i class="bi bi-save me-2"></i>Save Treatment Report
                    </button>
                </div>
            </form>
        </div>
    </div>
                        </div>


<div class="modal fade" id="viewDentalChartModal" tabindex="-1" aria-labelledby="viewDentalChartModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content border-0 shadow-lg rounded-lg overflow-hidden">
            <div class="modal-header bg-gradient-primary text-white">
                <h5 class="modal-title" id="viewDentalChartModalLabel">
                    <i class="bi bi-diagram-3 me-2"></i>Dental Chart
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
            <div class="modal-body p-4">
                <div class="mb-4">
                    <div class="d-flex align-items-center mb-3">
                        <i class="bi bi-clipboard-check text-success fs-3 me-3"></i>
                        <div>
                            <h4 class="mb-1 fw-bold">Dental Chart Record</h4>
                            <p class="text-muted mb-0">Treatment completed on <span id="dentalChartDate">
                                @(Model.TreatmentReports != null && Model.TreatmentReports.Any() ? Model.TreatmentReports.OrderByDescending(tr => tr.CreatedAt).FirstOrDefault()?.TreatmentDate.ToString("MMMM dd, yyyy") : "Not available")
                            </span></p>
                        </div>
                    </div>
                    <div class="alert alert-info d-flex align-items-center">
                        <i class="bi bi-info-circle-fill me-2"></i>
                        <div>
                            This chart uses the FDI World Dental Federation notation system (ISO 3950). Click on a tooth to view more details.
                        </div>
                    </div>
                        </div>

                <div class="dental-chart-container bg-light p-4 rounded-lg shadow-sm">
                    <h5 class="text-center mb-4 border-bottom pb-2 fw-bold">Upper Teeth</h5>
                    <div class="teeth-row" id="upperTeeth">
                            </div>
                    
                    <h5 class="text-center my-4 border-bottom pb-2 fw-bold">Lower Teeth</h5>
                    <div class="teeth-row mb-4" id="lowerTeeth">
                    </div>
                    
                    <div class="dental-chart-legend mt-4 p-3 border-top">
                        <h6 class="mb-3 fw-bold text-center">Dental Chart Legend</h6>
                        <div class="d-flex flex-wrap justify-content-center">
                            <div class="legend-item me-4 mb-2 d-flex align-items-center">
                                <div class="legend-color healthy-tooth me-2"></div>
                                <span>Healthy Tooth</span>
                            </div>
                            <div class="legend-item me-4 mb-2 d-flex align-items-center">
                                <div class="legend-color decayed-tooth me-2"></div>
                                <span>Decayed Tooth</span>
                            </div>
                            <div class="legend-item mb-2 d-flex align-items-center">
                                <div class="legend-color filled-tooth me-2"></div>
                                <span>Filled Tooth</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer bg-light">
                <button type="button" class="btn btn-primary rounded-pill px-4 shadow-sm" data-bs-dismiss="modal">
                    <i class="bi bi-check-lg me-1"></i>Close
                </button>
            </div>
        </div>
                        </div>
                    </div>


<div class="modal fade" id="editTreatmentReportModal" tabindex="-1" aria-labelledby="editTreatmentReportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content border-0 shadow-lg rounded-lg overflow-hidden">
            <div class="modal-header bg-gradient-primary text-white">
                <h5 class="modal-title" id="editTreatmentReportModalLabel">
                    <i class="bi bi-clipboard-check me-2"></i>Edit Treatment Report
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
            <form asp-action="UpdateTreatmentReport" asp-controller="Appointments" asp-area="Doctor" method="post">
                <input type="hidden" name="id" value="@Model.Id" />
                <input type="hidden" name="reportId" value="@(Model.TreatmentReports != null && Model.TreatmentReports.Any() ? Model.TreatmentReports.OrderByDescending(tr => tr.CreatedAt).FirstOrDefault()?.Id : 0)" />
                <input type="hidden" name="dentalChart" id="editDentalChartData" />
                <div class="modal-body p-4">
                    <div class="row mb-4">
                        <div class="col-12">
                            <h6 class="mb-3 text-primary fw-bold">
                                <i class="bi bi-pencil me-2"></i>Doctor's Treatment Notes
                            </h6>
                            <textarea name="treatmentNotes" id="editTreatmentNotes" class="form-control" rows="5" placeholder="Enter detailed notes about the treatment performed...">@(Model.TreatmentReports != null && Model.TreatmentReports.Any() ? Model.TreatmentReports.OrderByDescending(tr => tr.CreatedAt).FirstOrDefault()?.Notes : "")</textarea>
                </div>
            </div>
            
                    <h6 class="mb-3 text-primary fw-bold">
                        <i class="bi bi-diagram-3 me-2"></i>Dental Chart
                    </h6>
                    <div class="alert alert-info d-flex align-items-center mb-3">
                        <i class="bi bi-info-circle-fill me-2"></i>
                    <div>
                            Click on a tooth to change its status (Healthy → Decayed → Filled → Healthy)
                    </div>
                </div>
                    
                    <div class="dental-chart-container bg-light p-4 rounded-lg">
                        <h5 class="text-center mb-4 border-bottom pb-2">Upper Teeth</h5>
                        <div class="teeth-row" id="editUpperTeeth">
                            </div>
                        
                        <h5 class="text-center my-4 border-bottom pb-2">Lower Teeth</h5>
                        <div class="teeth-row" id="editLowerTeeth">
                            </div>
                        
                        <div class="dental-chart-legend mt-4 p-3 border-top">
                            <div class="d-flex flex-wrap justify-content-center">
                                <div class="legend-item me-4 mb-2 d-flex align-items-center">
                                    <div class="legend-color healthy-tooth me-2"></div>
                                    <span>Healthy Tooth</span>
                            </div>
                                <div class="legend-item me-4 mb-2 d-flex align-items-center">
                                    <div class="legend-color decayed-tooth me-2"></div>
                                    <span>Decayed Tooth</span>
                    </div>
                                <div class="legend-item mb-2 d-flex align-items-center">
                                    <div class="legend-color filled-tooth me-2"></div>
                                    <span>Filled Tooth</span>
                </div>
            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer bg-light">
                    <button type="button" class="btn btn-outline-secondary rounded-pill px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary rounded-pill px-4 shadow-sm">
                        <i class="bi bi-save me-2"></i>Update Treatment Report
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>


<div class="modal fade" id="updateStatusModal" tabindex="-1" aria-labelledby="updateStatusModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content border-0 shadow-lg rounded-lg overflow-hidden">
            <div class="modal-header bg-gradient-primary text-white">
                <h5 class="modal-title" id="updateStatusModalLabel">
                    <i class="bi bi-arrow-repeat me-2"></i>Update Appointment Status
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <p class="mb-4">Select the new status for appointment #@Model.Id:</p>
                <div class="status-options">
                    <div class="form-check status-option mb-3 p-3 border rounded-lg @(Model.Status == "Confirmed" ? "bg-light" : "")">
                        <input class="form-check-input" type="radio" name="appointmentStatus" id="statusConfirmed" value="Confirmed" @(Model.Status == "Confirmed" ? "checked" : "")>
                        <label class="form-check-label d-flex align-items-center" for="statusConfirmed">
                            <span class="status-icon bg-info text-white rounded-circle p-2 me-3">
                                <i class="bi bi-calendar-check"></i>
                            </span>
                            <div>
                                <span class="d-block fw-bold">Confirmed</span>
                                <small class="text-muted">The appointment is scheduled and confirmed</small>
                            </div>
                        </label>
                    </div>
                    <div class="form-check status-option mb-3 p-3 border rounded-lg @(Model.Status == "Completed" ? "bg-light" : "")">
                        <input class="form-check-input" type="radio" name="appointmentStatus" id="statusCompleted" value="Completed" @(Model.Status == "Completed" ? "checked" : "")>
                        <label class="form-check-label d-flex align-items-center" for="statusCompleted">
                            <span class="status-icon bg-success text-white rounded-circle p-2 me-3">
                                <i class="bi bi-check-circle"></i>
                            </span>
                            <div>
                                <span class="d-block fw-bold">Completed</span>
                                <small class="text-muted">The appointment and treatment are completed</small>
                            </div>
                        </label>
                    </div>
                    <div class="form-check status-option mb-3 p-3 border rounded-lg @(Model.Status == "No-Show" ? "bg-light" : "")">
                        <input class="form-check-input" type="radio" name="appointmentStatus" id="statusNoShow" value="No-Show" @(Model.Status == "No-Show" ? "checked" : "")>
                        <label class="form-check-label d-flex align-items-center" for="statusNoShow">
                            <span class="status-icon bg-warning text-white rounded-circle p-2 me-3">
                                <i class="bi bi-exclamation-triangle"></i>
                            </span>
                            <div>
                                <span class="d-block fw-bold">No-Show</span>
                                <small class="text-muted">The patient didn't attend the appointment</small>
                            </div>
                        </label>
                    </div>
                    <div class="form-check status-option p-3 border rounded-lg @(Model.Status == "Cancelled" ? "bg-light" : "")">
                        <input class="form-check-input" type="radio" name="appointmentStatus" id="statusCancelled" value="Cancelled" @(Model.Status == "Cancelled" ? "checked" : "")>
                        <label class="form-check-label d-flex align-items-center" for="statusCancelled">
                            <span class="status-icon bg-danger text-white rounded-circle p-2 me-3">
                                <i class="bi bi-x-circle"></i>
                            </span>
                            <div>
                                <span class="d-block fw-bold">Cancelled</span>
                                <small class="text-muted">The appointment was cancelled</small>
                            </div>
                        </label>
                    </div>
                </div>
            </div>
            <div class="modal-footer bg-light">
                <button type="button" class="btn btn-outline-secondary rounded-pill px-4" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary rounded-pill px-4 shadow-sm" onclick="updateStatus('@Model.Id', $('input[name=appointmentStatus]:checked').val())">
                    <i class="bi bi-check-lg me-1"></i>Update Status
                </button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="statusConfirmationModal" tabindex="-1" aria-labelledby="statusConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow-lg rounded-lg overflow-hidden">
            <div class="modal-header bg-gradient-primary text-white">
                <h5 class="modal-title" id="statusConfirmationModalLabel">
                    <i class="bi bi-exclamation-circle me-2"></i>Confirm Status Update
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="statusUpdateForm" method="get">
                <input type="hidden" id="statusUpdateAppointmentId" name="id" value="">
                <input type="hidden" id="statusUpdateNewStatus" name="status" value="">
                
                <div class="modal-body p-4">
                    <div class="text-center mb-4">
                        <div id="statusIcon" class="status-icon-large mb-3 mx-auto rounded-circle d-flex align-items-center justify-content-center">
                            <i class="bi bi-question-circle-fill fs-1"></i>
                        </div>
                        <h4 class="fw-bold">Update Appointment Status</h4>
                        <p class="text-muted" id="statusConfirmationText">Are you sure you want to change this appointment's status?</p>
                    </div>
                    
                    <div class="alert alert-info p-3 d-flex align-items-center">
                        <i class="bi bi-info-circle-fill me-3 fs-4"></i>
                        <span id="statusInfoText">This action will update the appointment status and cannot be easily reversed.</span>
                    </div>
                </div>
                <div class="modal-footer bg-light">
                    <button type="button" class="btn btn-outline-secondary rounded-pill px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" id="confirmStatusUpdateBtn" class="btn btn-primary rounded-pill px-4 shadow-sm">
                        <i class="bi bi-check-lg me-1"></i>Yes, Update Status
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            @if (TempData["SuccessMessage"] != null)
            {
                <text>
                showNotification('success', '@TempData["SuccessMessage"]');
                </text>
            }
            
            @if (TempData["ErrorMessage"] != null)
            {
                <text>
                showNotification('error', '@TempData["ErrorMessage"]');
                </text>
            }
            
            @if (TempData["InfoMessage"] != null)
            {
                <text>
                showNotification('info', '@TempData["InfoMessage"]');
                </text>
            }
            
            @if (TempData["ShowTreatmentReportModal"] != null && (bool)TempData["ShowTreatmentReportModal"] == true)
            {
                <text>
                setTimeout(function() {
                    $('#treatmentReportModal').modal('show');
                }, 1000); 
                </text>
            }
        });
        
        function updateStatus(appointmentId, status) {
            console.log('Update status function called with ID:', appointmentId, 'status:', status);
            
            const statusIconMap = {
                'Confirmed': '<i class="bi bi-calendar-check-fill fs-1 text-info"></i>',
                'Completed': '<i class="bi bi-check-circle-fill fs-1 text-success"></i>',
                'Cancelled': '<i class="bi bi-x-circle-fill fs-1 text-danger"></i>',
                'No-Show': '<i class="bi bi-exclamation-triangle-fill fs-1 text-warning"></i>'
            };
            
            const statusInfoMap = {
                'Confirmed': 'This will mark the appointment as confirmed and ready for the patient\'s visit.',
                'Completed': 'This will mark the appointment as completed. You\'ll be prompted to add treatment notes.',
                'Cancelled': 'This will mark the appointment as cancelled. Any payments may need to be refunded.',
                'No-Show': 'This will mark that the patient did not attend their scheduled appointment.'
            };
            
            const statusBgColorMap = {
                'Confirmed': 'bg-info',
                'Completed': 'bg-success',
                'Cancelled': 'bg-danger',
                'No-Show': 'bg-warning'
            };
            
            const actionUrl = '@Url.Action("UpdateStatus", "Appointments", new { area = "Doctor" })/' + appointmentId;
            $('#statusUpdateForm').attr('action', actionUrl);
            $('#statusUpdateAppointmentId').val(appointmentId);
            $('#statusUpdateNewStatus').val(status);
            
            $('#statusIcon').html(statusIconMap[status] || '<i class="bi bi-question-circle-fill fs-1"></i>');
            $('#statusIcon').removeClass('bg-info bg-success bg-danger bg-warning').addClass(statusBgColorMap[status] || 'bg-secondary');
            $('#statusConfirmationText').text(`Are you sure you want to change this appointment's status to "${status}"?`);
            $('#statusInfoText').text(statusInfoMap[status] || 'This action will update the appointment status and cannot be easily reversed.');
            
            $('#statusConfirmationModal').modal('show');
        }
        
        $(document).ready(function() {
            $('#statusUpdateForm').on('submit', function(e) {
                e.preventDefault();
                
                $('#confirmStatusUpdateBtn').prop('disabled', true).html('<i class="spinner-border spinner-border-sm me-2"></i>Processing...');
                
                const appointmentId = $('#statusUpdateAppointmentId').val();
                const status = $('#statusUpdateNewStatus').val();
                
                showNotification('info', `Updating appointment status to ${status}...`);
                
                const actionUrl = $(this).attr('action');
                window.location.href = actionUrl + '?status=' + status;
            });
        });
        
        function showNotification(type, message) {
            const notification = $('<div>').addClass('notification');
            
            if (type === 'success') {
                notification.addClass('notification-success');
                notification.html(`<i class="bi bi-check-circle me-2"></i>${message}`);
            } else if (type === 'error') {
                notification.addClass('notification-error');
                notification.html(`<i class="bi bi-exclamation-circle me-2"></i>${message}`);
            } else {
                notification.addClass('notification-info');
                notification.html(`<i class="bi bi-info-circle me-2"></i>${message}`);
            }
            
            $('body').append(notification);
            
            setTimeout(function() {
                notification.addClass('show');
            }, 100);
            
            setTimeout(function() {
                notification.removeClass('show');
                setTimeout(function() {
                    notification.remove();
                }, 500);
            }, 4000);
        }
        
        function saveTreatmentNotes() {
            const appointmentId = '@Model.Id';
            const notes = $('#treatmentNotes').val();
            
            if (!notes.trim()) {
                showNotification('error', 'Please enter treatment notes before saving');
                return;
            }
            
            $.ajax({
                url: '@Url.Action("AddTreatmentNotes", "Appointments")',
                type: 'POST',
                data: { appointmentId: appointmentId, notes: notes },
                success: function (result) {
                    if (result.success) {
                        $('#saveNotesBtn').prop('disabled', true);
                        showNotification('success', 'Treatment notes saved successfully');
                        setTimeout(function() {
                            window.location.reload();
                        }, 1500);
                    } else {
                        showNotification('error', result.message || 'An error occurred');
                    }
                },
                error: function (error) {
                    showNotification('error', 'An error occurred while saving treatment notes');
                    console.error(error);
                }
            });
        }
        
        $(document).ready(function() {
            const upperTeethNumbers = [18, 17, 16, 15, 14, 13, 12, 11, 21, 22, 23, 24, 25, 26, 27, 28];
            const lowerTeethNumbers = [48, 47, 46, 45, 44, 43, 42, 41, 31, 32, 33, 34, 35, 36, 37, 38];
            
            const traditionalToFDI = {
                1: 18, 2: 17, 3: 16, 4: 15, 5: 14, 6: 13, 7: 12, 8: 11,
                9: 21, 10: 22, 11: 23, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28,
                17: 38, 18: 37, 19: 36, 20: 35, 21: 34, 22: 33, 23: 32, 24: 31,
                25: 41, 26: 42, 27: 43, 28: 44, 29: 45, 30: 46, 31: 47, 32: 48
            };
            
            const FDIToTraditional = {};
            Object.keys(traditionalToFDI).forEach(key => {
                FDIToTraditional[traditionalToFDI[key]] = parseInt(key);
            });
            
            function generateTeethHtml(teethNumbers, rowId) {
                let html = '';
                for (let i = 0; i < teethNumbers.length; i++) {
                    const fdiNumber = teethNumbers[i];
                    const traditionalNumber = FDIToTraditional[fdiNumber];
                    html += `
                    <div class="tooth shadow-sm" id="tooth-${fdiNumber}-${rowId}" data-tooth-number="${fdiNumber}" data-traditional-number="${traditionalNumber}">
                        <div class="tooth-number">${fdiNumber}</div>
                        <div class="tooth-status">Loading...</div>
                    </div>`;
                }
                $(`#${rowId}`).html(html);
            }
            
            function getSavedDentalChartData() {
                @if (Model.TreatmentReports != null && Model.TreatmentReports.Any() && !string.IsNullOrEmpty(Model.TreatmentReports.OrderByDescending(tr => tr.CreatedAt).FirstOrDefault()?.DentalChart))
                {
                    <text>
                    try {
                        const savedChartData = @Html.Raw(Json.Serialize(Model.TreatmentReports.OrderByDescending(tr => tr.CreatedAt).FirstOrDefault()?.DentalChart));
                        if (savedChartData) {
                            return JSON.parse(savedChartData);
                        }
                    } catch (e) {
                        console.error("Error parsing dental chart data:", e);
                    }
                    </text>
                }
                return null;
            }
            
            function convertTraditionalToFDI(traditionalData) {
                if (!traditionalData) return null;
                
                const fdiData = {};
                Object.keys(traditionalData).forEach(traditionalNum => {
                    const fdiNum = traditionalToFDI[traditionalNum];
                    if (fdiNum) {
                        fdiData[fdiNum] = traditionalData[traditionalNum].toLowerCase();
                    }
                });
                return fdiData;
            }
            
            $('#viewDentalChartModal').on('show.bs.modal', function () {
                generateTeethHtml(upperTeethNumbers, 'upperTeeth');
                generateTeethHtml(lowerTeethNumbers, 'lowerTeeth');
                
                const traditionalData = getSavedDentalChartData();
                const fdiData = convertTraditionalToFDI(traditionalData);
                
                if (fdiData) {
                    updateTeethUI(fdiData, 'upperTeeth');
                    updateTeethUI(fdiData, 'lowerTeeth');
                } else {
                    const sampleData = generateSampleTeethData();
                    updateTeethUI(sampleData, 'upperTeeth');
                    updateTeethUI(sampleData, 'lowerTeeth');
                }
            });
            
            $('#treatmentReportModal').on('show.bs.modal', function () {
                generateTeethHtml(upperTeethNumbers, 'upperTeethEdit');
                generateTeethHtml(lowerTeethNumbers, 'lowerTeethEdit');
                
                setTimeout(function() {
                    const teethData = {};
                    
                    upperTeethNumbers.concat(lowerTeethNumbers).forEach(function(toothNumber) {
                        teethData[toothNumber] = 'healthy';
                    });
                    
                    updateTeethUI(teethData, 'upperTeethEdit');
                    updateTeethUI(teethData, 'lowerTeethEdit');
                    
                    const traditionalData = {};
                    Object.keys(teethData).forEach(fdiNum => {
                        const traditionalNum = FDIToTraditional[fdiNum];
                        traditionalData[traditionalNum] = teethData[fdiNum].charAt(0).toUpperCase() + teethData[fdiNum].slice(1);
                    });
                    
                    $('#dentalChartData').val(JSON.stringify(traditionalData));
                }, 300);
            });
            
            $('#editTreatmentReportModal').on('show.bs.modal', function() {
                generateTeethHtml(upperTeethNumbers, 'editUpperTeeth');
                generateTeethHtml(lowerTeethNumbers, 'editLowerTeeth');
                
                const traditionalData = getSavedDentalChartData();
                if (traditionalData) {
                    const fdiData = convertTraditionalToFDI(traditionalData);
                    
                    updateTeethUI(fdiData, 'editUpperTeeth');
                    updateTeethUI(fdiData, 'editLowerTeeth');
                    
                    $('#editDentalChartData').val(JSON.stringify(traditionalData));
                } else {
                    const teethData = {};
                    upperTeethNumbers.concat(lowerTeethNumbers).forEach(function(toothNumber) {
                        teethData[toothNumber] = 'healthy';
                    });
                    
                    updateTeethUI(teethData, 'editUpperTeeth');
                    updateTeethUI(teethData, 'editLowerTeeth');
                    
                    const traditionalData = {};
                    Object.keys(teethData).forEach(fdiNum => {
                        const traditionalNum = FDIToTraditional[fdiNum];
                        traditionalData[traditionalNum] = teethData[fdiNum].charAt(0).toUpperCase() + teethData[fdiNum].slice(1);
                    });
                    
                    $('#editDentalChartData').val(JSON.stringify(traditionalData));
                }
            });
            
            function generateSampleTeethData() {
                const teethData = {};
                
                upperTeethNumbers.concat(lowerTeethNumbers).forEach(function(toothNumber) {
                    teethData[toothNumber] = Math.random() > 0.7 ? 'decayed' : (Math.random() > 0.5 ? 'filled' : 'healthy');
                });
                
                return teethData;
            }
            
            function updateTeethUI(teethData, containerPrefix) {
                Object.keys(teethData).forEach(function(toothNumber) {
                    const status = teethData[toothNumber];
                    const selector = containerPrefix ? 
                        `#tooth-${toothNumber}-${containerPrefix}` : 
                        `#tooth-${toothNumber}`;
                    
                    const $tooth = $(selector);
                    if ($tooth.length) {
                        $tooth.removeClass('healthy-tooth decayed-tooth filled-tooth');
                        
                        $tooth.addClass(`${status}-tooth`);
                        $tooth.find('.tooth-status').text(status.charAt(0).toUpperCase() + status.slice(1));
                    }
                });
            }
            
            function setupToothClickHandlers(modalSelector, hiddenInputId) {
                $(document).on('click', `${modalSelector} .tooth`, function() {
                    const fdiNumber = $(this).data('tooth-number');
                    const traditionalNumber = $(this).data('traditional-number');
                    const currentStatus = $(this).find('.tooth-status').text().toLowerCase();
                    
                    let newStatus;
                    if (currentStatus === 'healthy') {
                        newStatus = 'decayed';
                    } else if (currentStatus === 'decayed') {
                        newStatus = 'filled';
                    } else {
                        newStatus = 'healthy';
                    }
                    
                    $(this).removeClass('healthy-tooth decayed-tooth filled-tooth')
                           .addClass(`${newStatus}-tooth`)
                           .find('.tooth-status').text(newStatus.charAt(0).toUpperCase() + newStatus.slice(1));
                    
                    const dentalChartData = JSON.parse($(`#${hiddenInputId}`).val() || '{}');
                    dentalChartData[traditionalNumber] = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
                    $(`#${hiddenInputId}`).val(JSON.stringify(dentalChartData));
                });
            }
            
            setupToothClickHandlers('#treatmentReportModal', 'dentalChartData');
            setupToothClickHandlers('#editTreatmentReportModal', 'editDentalChartData');
            
            $(document).on('click', '#viewDentalChartModal .tooth', function() {
                const fdiNumber = $(this).data('tooth-number');
                const traditionalNumber = $(this).data('traditional-number');
                const status = $(this).find('.tooth-status').text().toLowerCase();
                
                showToothDetails(fdiNumber, traditionalNumber, status);
            });
            
            function showToothDetails(fdiNumber, traditionalNumber, status) {
                let tooltipContent = `
                <div class="tooth-details p-3">
                    <h5 class="fw-bold mb-2">Tooth #${fdiNumber}</h5>
                    <p class="mb-2">Traditional Notation: #${traditionalNumber}</p>
                    <div class="d-flex align-items-center">
                        <span class="status-dot ${status}-dot me-2"></span>
                        <span class="fw-medium">Status: ${status.charAt(0).toUpperCase() + status.slice(1)}</span>
                    </div>
                    <p class="mt-2 mb-0 text-muted small">Click outside to close</p>
                </div>`;
                
                const $tooltip = $('<div>')
                    .addClass('tooth-tooltip')
                    .html(tooltipContent)
                    .appendTo('body');
                
                const $tooth = $(`#tooth-${fdiNumber}-upperTeeth, #tooth-${fdiNumber}-lowerTeeth`);
                const toothPosition = $tooth.offset();
                
                $tooltip.css({
                    top: toothPosition.top + $tooth.outerHeight() + 10,
                    left: toothPosition.left + ($tooth.outerWidth() / 2) - ($tooltip.outerWidth() / 2)
                }).addClass('show');
                
                $(document).on('click.tooth-tooltip', function(e) {
                    if (!$(e.target).closest('.tooth-tooltip').length) {
                        $tooltip.remove();
                        $(document).off('click.tooth-tooltip');
                    }
                });
            }
        });
    </script>
    
    <style>
        .status-icon-large {
            width: 80px;
            height: 80px;
            color: white;
        }
    </style>
}

@section Styles {
<style>
        .card {
            border-radius: 0.75rem;
            transition: all 0.2s ease;
            border: none;
        }
        
        .card-header {
            border-bottom: 1px solid rgba(0,0,0,0.05);
        }
        
        .badge {
            font-weight: 600;
            letter-spacing: 0.3px;
        }
        
        .rounded-lg {
            border-radius: 0.75rem !important;
        }
        
        .shadow-sm {
            box-shadow: 0 0.125rem 0.375rem rgba(0, 0, 0, 0.1) !important;
        }
        
        .bg-light {
            background-color: #f8f9fa !important;
        }
        
        .fw-medium {
            font-weight: 500;
        }
        
        .rounded-pill {
            border-radius: 50rem !important;
        }
        
        .btn-circle {
            width: 36px;
            height: 36px;
            padding: 0;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }
        
        .btn-circle:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .bg-gradient-primary {
            background: linear-gradient(45deg, #4e73df, #2e59d9);
        }
        
        .bg-gradient-success {
            background: linear-gradient(45deg, #1cc88a, #13855c);
        }
        
        .bg-gradient-info {
            background: linear-gradient(45deg, #36b9cc, #258391);
        }
        
        .bg-gradient-warning {
            background: linear-gradient(45deg, #f6c23e, #dda20a);
        }
        
        .bg-gradient-danger {
            background: linear-gradient(45deg, #e74a3b, #be2617);
        }
        
        .status-banner {
            background-color: #4e73df;
            color: white;
        }
        
        .status-icon, .payment-icon {
            width: 50px;
            height: 50px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: rgba(255, 255, 255, 0.2);
        }
        
        .timeline-modern {
    position: relative;
            padding-left: 2rem;
}
        
.timeline-item {
    position: relative;
            padding-bottom: 2rem;
            border-left: 2px solid #e3e6f0;
            padding-left: 1.5rem;
        }
        
        .timeline-item:last-child {
            padding-bottom: 0;
            border-left: 2px solid transparent;
        }
        
.timeline-marker {
    position: absolute;
            left: -0.85rem;
            width: 1.75rem;
            height: 1.75rem;
    border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.85rem;
        }
        
        .patient-avatar,
        .doctor-avatar {
            width: 100px;
            height: 100px;
            margin: 0 auto;
            border-radius: 50%;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2.5rem;
            font-weight: bold;
            box-shadow: 0 0.25rem 0.5rem rgba(0,0,0,0.1);
        }
        
        .doctor-avatar {
            background-color: #36b9cc;
            font-size: 2rem;
        }
        
        .detail-card,
        .patient-detail-card,
        .payment-summary-card {
            transition: all 0.2s ease;
        }
        
        .detail-card:hover,
        .patient-detail-card:hover,
        .payment-summary-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 0.25rem 0.5rem rgba(0,0,0,0.05);
        }
        
        .payment-status-detail {
            transition: all 0.2s ease;
        }
        
        .payment-status-icon {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .dental-chart-container {
            background-color: #ffffff;
            border-radius: 0.75rem;
        }
        
        .teeth-row {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 12px;
            padding: 10px;
        }
        
        .tooth {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid #e1e5eb;
            background-color: #ffffff;
        }
        
        .tooth:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .tooth-number {
            font-weight: bold;
            font-size: 16px;
            margin-bottom: 4px;
            color: #333;
        }
        
        .tooth-status {
            font-size: 12px;
            font-weight: 500;
        }
        
        .healthy-tooth {
            background-color: #e8f5e9;
            border: 1px solid #a5d6a7;
            color: #2e7d32;
        }
        
        .decayed-tooth {
            background-color: #ffebee;
            border: 1px solid #ef9a9a;
            color: #c62828;
        }
        
        .filled-tooth {
            background-color: #e3f2fd;
            border: 1px solid #90caf9;
            color: #1565c0;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            font-weight: 500;
        }
        
        .legend-color {
            width: 20px;
            height: 20px;
            border-radius: 6px;
            margin-right: 8px;
        }
        
        .tooth-tooltip {
            position: absolute;
            background-color: white;
            border-radius: 0.5rem;
            box-shadow: 0 5px 15px rgba(0,0,0,0.15);
            z-index: 1070;
            min-width: 200px;
            opacity: 0;
            transition: opacity 0.3s;
            pointer-events: none;
        }
        
        .tooth-tooltip.show {
            opacity: 1;
            pointer-events: auto;
        }
        
        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
        }
        
        .healthy-dot {
            background-color: #2e7d32;
        }
        
        .decayed-dot {
            background-color: #c62828;
        }
        
        .filled-dot {
            background-color: #1565c0;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 0.5rem;
            background-color: white;
            box-shadow: 0 5px 15px rgba(0,0,0,0.15);
            z-index: 1080;
            transform: translateY(-20px);
            opacity: 0;
            transition: all 0.3s;
            max-width: 350px;
            display: flex;
            align-items: center;
        }
        
        .notification.show {
            transform: translateY(0);
            opacity: 1;
        }
        
        .notification-success {
            border-left: 4px solid #1cc88a;
        }
        
        .notification-error {
            border-left: 4px solid #e74a3b;
        }
        
        .notification-info {
            border-left: 4px solid #4e73df;
        }
        
        .status-option {
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .status-option:hover {
            background-color: #f8f9fa;
        }
        
        .status-option input[type="radio"] {
            cursor: pointer;
        }
        
        .status-option label {
            cursor: pointer;
            width: 100%;
            margin-bottom: 0;
        }
        
        .payment-type-icon {
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background-color: #f8f9fa;
        }
        
        @@media (max-width: 767.98px) {
            .patient-avatar,
            .doctor-avatar {
                width: 80px;
                height: 80px;
                font-size: 2rem;
            }
            
            .doctor-avatar {
                font-size: 1.5rem;
            }
            
            .timeline-modern {
                padding-left: 1.5rem;
            }
            
            .timeline-marker {
                width: 1.5rem;
                height: 1.5rem;
                left: -0.75rem;
                font-size: 0.75rem;
            }
            
            .tooth {
                width: 50px;
                height: 50px;
            }
            
            .tooth-number {
                font-size: 14px;
            }
            
            .tooth-status {
                font-size: 10px;
            }
            
            .status-icon, .payment-icon {
                width: 40px;
                height: 40px;
            }
}
</style>
}

@functions {
    string GetStatusAlertClass(string status)
    {
        return status switch
        {
            "Scheduled" => "alert-info",
            "Confirmed" => "alert-info",
            "Completed" => "alert-success",
            "Cancelled" => "alert-danger",
            "No-Show" => "alert-warning",
            _ => "alert-secondary"
        };
    }
    
    string GetStatusCardClass(string status)
    {
        return status switch
        {
            "Scheduled" => "bg-info",
            "Confirmed" => "bg-info",
            "Completed" => "bg-success",
            "Cancelled" => "bg-danger",
            "No-Show" => "bg-warning",
            _ => "bg-secondary"
        };
    }
    
    string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Scheduled" => "bg-info",
            "Confirmed" => "bg-info",
            "Completed" => "bg-success",
            "Cancelled" => "bg-danger",
            "No-Show" => "bg-warning",
            _ => "bg-secondary"
        };
    }

    string GetStatusIcon(string status)
    {
        return status switch
        {
            "Scheduled" => "bi bi-calendar-check",
            "Confirmed" => "bi bi-calendar-check",
            "Completed" => "bi bi-check-circle",
            "Cancelled" => "bi bi-x-circle",
            "No-Show" => "bi bi-exclamation-triangle",
            _ => "bi bi-question-circle"
        };
    }
    
    string GetPaymentStatusAlertClass(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Paid => "alert-success",
            PaymentStatus.PartiallyPaid => "alert-info",
            PaymentStatus.Pending => "alert-warning",
            PaymentStatus.Refunded => "alert-secondary",
            PaymentStatus.PartiallyRefunded => "alert-secondary",
            PaymentStatus.Failed => "alert-danger",
            PaymentStatus.Cancelled => "alert-danger",
            _ => "alert-secondary"
        };
    }
    
    string GetPaymentCardClass(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Paid => "bg-success",
            PaymentStatus.PartiallyPaid => "bg-info",
            PaymentStatus.Pending => "bg-warning",
            PaymentStatus.Refunded => "bg-secondary",
            PaymentStatus.PartiallyRefunded => "bg-secondary",
            PaymentStatus.Failed => "bg-danger",
            PaymentStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    string GetPaymentStatusBadgeClass(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Paid => "bg-success",
            PaymentStatus.PartiallyPaid => "bg-info",
            PaymentStatus.Pending => "bg-warning",
            PaymentStatus.Refunded => "bg-secondary",
            PaymentStatus.PartiallyRefunded => "bg-secondary",
            PaymentStatus.Failed => "bg-danger",
            PaymentStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    string GetPaymentStatusIcon(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Paid => "bi bi-check-circle-fill",
            PaymentStatus.PartiallyPaid => "bi bi-check-circle",
            PaymentStatus.Pending => "bi bi-hourglass-split",
            PaymentStatus.Refunded => "bi bi-arrow-return-left",
            PaymentStatus.PartiallyRefunded => "bi bi-arrow-return-left",
            PaymentStatus.Failed => "bi bi-x-circle-fill",
            PaymentStatus.Cancelled => "bi bi-x-octagon-fill",
            _ => "bi bi-question-circle"
        };
    }
    
    string GetPaymentStatusCardClass(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Paid => "bg-success bg-opacity-10 border-success",
            PaymentStatus.PartiallyPaid => "bg-info bg-opacity-10 border-info",
            PaymentStatus.Pending => "bg-warning bg-opacity-10 border-warning",
            PaymentStatus.Refunded => "bg-secondary bg-opacity-10 border-secondary",
            PaymentStatus.PartiallyRefunded => "bg-secondary bg-opacity-10 border-secondary",
            PaymentStatus.Failed => "bg-danger bg-opacity-10 border-danger",
            PaymentStatus.Cancelled => "bg-danger bg-opacity-10 border-danger",
            _ => "bg-secondary bg-opacity-10 border-secondary"
        };
    }
    
    string GetPaymentStatusTextClass(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Paid => "text-success",
            PaymentStatus.PartiallyPaid => "text-info",
            PaymentStatus.Pending => "text-warning",
            PaymentStatus.Refunded => "text-secondary",
            PaymentStatus.PartiallyRefunded => "text-secondary",
            PaymentStatus.Failed => "text-danger",
            PaymentStatus.Cancelled => "text-danger",
            _ => "text-secondary"
        };
    }
    
    string GetPaymentStatusDescription(PaymentStatus status, decimal totalAmount, decimal depositAmount)
    {
        return status switch
        {
            PaymentStatus.Paid => "Full payment has been received.",
            PaymentStatus.PartiallyPaid => $"Deposit of RM {depositAmount:0.00} received. Remaining: RM {(totalAmount - depositAmount):0.00}",
            PaymentStatus.Pending => "Payment has not been processed yet.",
            PaymentStatus.Refunded => "Full payment has been refunded to the patient.",
            PaymentStatus.PartiallyRefunded => "Part of the payment has been refunded to the patient.",
            PaymentStatus.Failed => "Payment attempt failed. Please contact patient.",
            PaymentStatus.Cancelled => "Payment was cancelled.",
            _ => "Unknown payment status"
        };
    }
    
    string GetPaymentBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "succeeded" => "bg-success",
            "pending" => "bg-warning",
            "failed" => "bg-danger",
            "cancelled" => "bg-danger",
            "refunded" => "bg-secondary",
            _ => "bg-secondary"
        };
    }
    
    string GetPaymentTypeIcon(object paymentType)
    {
        if (paymentType == null) return "bi-wallet";
        
        string paymentTypeStr = paymentType.ToString().ToLower();
        return paymentTypeStr switch
        {
            "creditcard" => "bi-credit-card",
            "debitcard" => "bi-credit-card",
            "cash" => "bi-cash",
            "banktransfer" => "bi-bank",
            "online" => "bi-globe",
            "insurance" => "bi-shield-check",
            _ => "bi-wallet"
        };
    }
    
    string TimeUntilAppointment(DateTime appointmentTime)
    {
        try
        {
            var timeSpan = appointmentTime - DateTime.Now;
            
            if (timeSpan.TotalDays > 1)
                return $"{Math.Floor(timeSpan.TotalDays)} days from now";
            else if (timeSpan.TotalHours > 1)
                return $"{Math.Floor(timeSpan.TotalHours)} hours from now";
            else if (timeSpan.TotalMinutes > 1)
                return $"{Math.Floor(timeSpan.TotalMinutes)} minutes from now";
            else if (timeSpan.TotalMinutes > 0)
                return "starting now";
            else
                return "appointment time passed";
        }
        catch
        {
            return "time unavailable";
        }
    }
    
    int CalculateAge(DateTime dateOfBirth)
    {
        var today = DateTime.Today;
        var age = today.Year - dateOfBirth.Year;
        if (dateOfBirth.Date > today.AddYears(-age))
            age--;
        return age;
    }
} 